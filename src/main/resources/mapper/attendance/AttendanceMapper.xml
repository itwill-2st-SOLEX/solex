<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.itwillbs.solex.attendance.AttendanceMapper">
    <select id="selectMyAttendenceByMonthList" resultType="java.util.Map">
    	SELECT
             att.att_id,
             att.emp_id,
             NVL(TO_CHAR(att_in_time, 'YYYY-MM-DD HH24:MI:SS'), '-') as att_in_time,
 			 NVL(TO_CHAR(att_out_time, 'YYYY-MM-DD HH24:MI:SS'), '-') as att_out_time,
             cd.det_nm,
             NVL(TO_CHAR(att_day, 'YYYY-MM-DD HH24:MI:SS'), '-') as att_day
        FROM
             attendance att 
        JOIN code_detail cd 
          ON cd.det_id = att.att_sts
        WHERE att.emp_id = #{empId}
		  AND TO_CHAR(att_in_time, 'YYYY') = #{year}  
 		  AND TO_CHAR(att_in_time, 'MM') = LPAD(#{month, jdbcType=VARCHAR}, 2, '0') 
     ORDER BY att.att_day ASC
    </select>
    
    <select id="selectAttendenceByMonthList" resultType="java.util.Map">
    	SELECT
		       e.emp_num,         				-- 휘하 직원의 사번    
		    -- TO_CHAR(MIN(a.att_in_time), 'YYYY-MM-DD HH24:MI:SS') AS first_att_in_time -- 해당 일자의 첫 출근시간
		       TO_CHAR(att_in_time, 'YYYY-MM-DD HH:MI AM') AS att_in_time,
		       TO_CHAR(att_out_time, 'YYYY-MM-DD HH:MI AM') AS att_out_time,
		       TO_CHAR(att_day, 'YYYY-MM-DD HH:MI AM') AS att_day,
		     e.dep_id,          				-- 휘하 직원의 부서
		     e.dep_position,     				-- 휘하 직원의 직위
		     cd_e.det_sort
		  FROM employee_copy e         			-- 휘하 직원을 나타내는 별칭
		  JOIN employee_copy m         			-- 매니저(결재권자)를 나타내는 별칭
		    ON e.dep_id = m.dep_id 				-- 동일 부서인 경우만 조인
		  JOIN code_detail cd_e 
		    ON e.dep_position = cd_e.det_nm -- 휘하 직원의 직위 
		  JOIN code_detail cd_m 
		    ON m.dep_position = cd_m.det_nm -- 부서장의 직위 
		  JOIN attendance a
            ON e.emp_id = a.emp_id				-- 출퇴근 data
            
        <where>
               m.emp_id = #{emp_id} 					-- 결재권자의 id
           AND cd_e.det_sort > cd_m.det_sort		-- 결재권자 보다 직급이 아래(dep_sort가 더 높다)
		   AND TO_CHAR(a.att_in_time, 'YYYY') = #{year}  
 		   AND TO_CHAR(a.att_in_time, 'MM') = LPAD(#{month, jdbcType=VARCHAR}, 2, '0')
			<if test="keyword != null and keyword != ''">
		   AND (LOWER(e.emp_num) LIKE '%' || LOWER(#{keyword}) || '%'
			OR LOWER(e.dep_position) LIKE '%' || LOWER(#{keyword}) || '%')
			</if>
		</where>    
    </select>
    
    <select id="findByEmpIdAndAttendanceDate" resultType="java.util.Map">
        SELECT
              att.att_id,
              att.emp_id,
              att.att_day,
              -- NVL(TO_CHAR(att_in_time, 'YYYY-MM-DD HH24:MI:SS'), '-') as att_in_time,
              -- NVL(TO_CHAR(att_out_time, 'YYYY-MM-DD HH24:MI:SS'), '-') as att_out_time,
              TO_CHAR(att.att_in_time, 'YYYY-MM-DD HH24:MI:SS') as att_in_time,
        	  TO_CHAR(att.att_out_time, 'YYYY-MM-DD HH24:MI:SS') as att_out_time, -- NULL이면 그대로 NULL이 넘어감
 			  cd.det_nm,
              TO_CHAR(att.att_day, 'YYYY-MM-DD HH24:MI:SS') as att_day
         FROM attendance att
         JOIN code_detail cd 
           ON cd.det_id = att.att_sts
        WHERE
              att.emp_id = #{emp_id} AND att.att_day = #{att_day}
    </select>

    <insert id="insertPunchIn">
        INSERT INTO attendance (
            emp_id,
            att_day,
            att_in_time,
            att_sts
        ) VALUES (
            #{emp_id},
            #{att_day},
            #{att_in_time},
            #{att_sts}
        )
    </insert>
    
    <update id="updatePunchOut" parameterType="java.util.Map">
        UPDATE attendance
        SET
            att_out_time = #{punchOutTime, jdbcType=DATE},
            att_sts = #{att_sts, jdbcType=VARCHAR}
<!--             total_work_minutes = #{totalWorkMinutes} -->
        WHERE
            emp_id = #{EMP_ID, jdbcType=NUMERIC}
    </update>
    
</mapper>	
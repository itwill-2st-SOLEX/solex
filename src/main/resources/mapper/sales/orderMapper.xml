<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.itwillbs.solex.sales.OrderMapper">
  <select id="selectPagedOrderDataAsMap" parameterType="Map" resultType="Map">
    SELECT
        prd.prd_cd,
        prd.prd_nm,
        cli.cli_nm,
        cd.det_nm,
        ord.ord_reg_date,
        odd.odd_cnt,
        NVL(odd.odd_add, '') || ' ' || NVL(odd.odd_da, '') AS ODD_ADDRESS,
        TO_CHAR(odd.odd_mod_date, 'YYYY-MM-DD') AS ORD_REG_DATE
    FROM suju_order_detail odd
    JOIN suju_order ord ON odd.ord_id = ord.ord_id
    JOIN client cli ON ord.cli_id = cli.cli_id
    JOIN product_option opt ON opt.opt_id = odd.odd_id
    JOIN product prd ON prd.prd_cd = opt.prd_cd 
    JOIN code_detail cd ON odd.odd_sts = cd.det_id
    <if test="searchKeyword != null and searchKeyword != ''">
        AND (
            cli.cli_nm LIKE '%' || #{searchKeyword} || '%' OR  -- 거래처명 검색
            prd.prd_nm LIKE '%' || #{searchKeyword} || '%' OR  -- 상품명 검색
            prd.prd_cd LIKE '%' || #{searchKeyword} || '%'     -- 상품코드도 검색에 포함
        )
    </if>
    ORDER BY cd.det_sort asc
    OFFSET #{offset} ROWS
    FETCH NEXT #{limit} ROWS ONLY
</select>


<select id="getSearchClientList" parameterType="Map" resultType="Map">
    SELECT
    	cli_nm, cli_id
    FROM client
    <where>
	  cli_type = 'SELLER'
      <!-- searchKeyword 가 있을 때만 WHERE 절 추가 -->
      <if test="searchKeyword != null and searchKeyword != ''">
        AND LOWER(cli_nm) LIKE '%' || #{searchKeyword} || '%'
      </if>
    </where>
    ORDER BY cli_nm
    OFFSET #{offset} ROWS
    FETCH NEXT #{limit} ROWS ONLY
</select>


  
  <select id="countClientsByEmployeeId" resultType="int">
  	SELECT count(*)
  	FROM client
  	WHERE emp_id = #{emp_id} and cli_type = 'SELLER' 
  </select>
  
  <select id="getSelectClientsByEmployeeId" resultType="Map">
  	SELECT cli_nm
  	FROM client
  	WHERE emp_id = #{emp_id}
  	and cli_type = 'SELLER'
  	ORDER BY cli_nm 
  </select>
  
  <select id="getSelectTop5PopularClients" resultType="Map">
    SELECT
    	cli_nm, cli_id
    FROM (
        SELECT
            cli.cli_nm,cli.cli_id,
            COUNT(suju.cli_id) AS order_count
        FROM client cli 
        JOIN suju_order suju    
        ON cli.cli_id = suju.cli_id
        WHERE cli.cli_type = 'SELLER'    
        GROUP BY
            cli.cli_nm,cli.cli_id
        ORDER BY order_count DESC
    )
    WHERE ROWNUM <![CDATA[ <= ]]> 5
   </select>
   
   <select id="getSelectTop5PopularProducts" resultType="Map">
    SELECT
    	prd_nm, prd_cd
    FROM (
        SELECT
	        p.prd_nm,
	        p.prd_cd,
	        SUM(od.odd_cnt) AS total_sales
	    FROM
	        product p 
	    JOIN
	        product_option opt ON p.prd_cd = opt.prd_cd 
	    JOIN
	        suju_order_detail od ON opt.opt_id = od.opt_id 
	    GROUP BY
	        p.prd_nm, p.prd_cd
	    ORDER BY
	        total_sales DESC
    	)
    WHERE ROWNUM <![CDATA[ <= ]]> 5
   </select>
   
   
	<select id="getSearchProductList" parameterType="Map" resultType="Map">
	    SELECT
	    	prd_nm, prd_cd
	    FROM product
	    <where>
	      <!-- searchKeyword 가 있을 때만 WHERE 절 추가 -->
	      <if test="searchKeyword != null and searchKeyword != ''">
	        AND LOWER(prd_nm) LIKE '%' || #{searchKeyword} || '%'
	      </if>
	    </where>
	    ORDER BY prd_nm
	    OFFSET #{offset} ROWS
	    FETCH NEXT #{limit} ROWS ONLY
	</select>
	
	<!--    이거 수정 해야 됨 조인 해서 코드 받아ㅑㅇ 됨  -->
	<select id="getStockCount" resultType="int">
		SELECT 
			stk_cnt
		FROM stock stk join product prd
		ON stk.item_id = prd.prd_cd
		WHERE prd.prd_cd = #{productCode}
		AND stk_cat = 'stk_cat_01'
	</select>
  	
  	<!-- 1 -->
  	<insert id="createSujuOrder" parameterType="map" useGeneratedKeys="true" keyColumn="ord_id"  keyProperty="ord_id">
  		INSERT INTO suju_order(cli_id, emp_id, ord_reg_date)
  			VALUES(#{cli_id},#{emp_id},SYSDATE)
  	</insert>
  	
  	<!-- 2 -->
  	<select id="checkMaterialStock" parameterType="map" resultType="int">
	    SELECT
	        COUNT(*)
	    FROM
	        BOM b
	    JOIN
	        STOCK s 
	    ON b.mat_id = s.item_id
	    WHERE
	        b.prd_cd = #{prd_cd}
	        AND s.stk_cnt &lt; (b.bom_cnt * #{odd_cnt})
	        AND s.stk_cat = 'stk_cat_02'
	</select>
  	
  	
  	<!-- 3 -->
  	<insert id="createSujuOrderDetail">
  		INSERT INTO suju_order_detail(
  		  ord_id, prd_cd, odd_cnt, odd_end_date, odd_sts, odd_pc, odd_add, odd_da, odd_pay, odd_pay_date, odd_mod_date 
  		)
  			VALUES(
  			#{ord_id}, #{prd_cd}, #{odd_cnt}, #{odd_end_date}, #{odd_sts}, #{odd_pc}, #{odd_add},#{odd_da}, #{odd_pay}, #{odd_pay_date}, SYSDATE)
  	</insert>
  	
  	<!-- 3-1 연결된 자재를 찾아 재고 수량을 차감하고, 수정일을 업데이트함. -->
  	<update id="deductStock" parameterType="map">
	    MERGE INTO stock s
	    USING (
	        SELECT
	            mat_id,
	            (bom_cnt * #{ord_cnt}) AS DEDUCT_QTY
	        FROM BOM
	        WHERE prd_cd = #{prd_cd}
	    ) b ON (s.item_id = b.mat_id AND s.stk_cat = 'stk_cat_02')
	    WHEN MATCHED THEN
	        UPDATE SET
	            s.stk_cnt = s.stk_cnt - b.DEDUCT_QTY,
	            s.stk_mod_date = SYSDATE;
	</update>
  	
  	
  	<!-- 3-2 부족한 수량을 가져옴 -->
  	<select id="getLackingMaterials" parameterType="map" resultType="map">
	    SELECT
	        b.mat_id,
	        ( (b.bom_cnt * #{ord_cnt}) - s.stk_cnt ) AS lacking_qty
	    FROM
	        BOM b
	    JOIN
	        STOCK s ON b.mat_id = s.item_id
	    WHERE
	        b.prd_cd = #{prd_cd}
	        AND s.stk_cnt &lt; (b.bom_cnt * #{ord_cnt})
	        AND s.stk_cat = 'stk_cat_02'
	</select>
	
	<!-- 3-2에서 부족한 수량을 발주 테이블에 insert -->
	<insert id="createPurchaseRequest" parameterType="map">
    INSERT INTO  (
        mat_id,
        emp_id,
        mat_reg_date
    ) VALUES (
        #{ord_id},      -- 서비스단에서 추가해준 주문 ID
        #{MAT_ID},      -- getLackingMaterials에서 조회한 자재 ID
        #{lacking_qty}  -- getLackingMaterials에서 계산한 부족 수량
    )
	</insert>
  	
  	
  	
	


	
  	
  	
	
  
  
  
</mapper>
